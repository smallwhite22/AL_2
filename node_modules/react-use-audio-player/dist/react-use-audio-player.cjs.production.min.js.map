{"version":3,"file":"react-use-audio-player.cjs.production.min.js","sources":["../src/audioPlayerState.ts","../src/context.ts","../src/useAudioPlayer.ts","../src/useIsomorphicLayout.tsx","../src/AudioPlayerProvider.tsx","../src/useAudioPosition.ts"],"sourcesContent":["export enum Actions {\n    START_LOAD,\n    ON_LOAD,\n    ON_PLAY,\n    ON_END,\n    ON_PAUSE,\n    ON_STOP,\n    ON_PLAY_ERROR,\n    ON_LOAD_ERROR\n}\n\ninterface BaseAction {\n    type: Actions\n}\n\ninterface ErrorAction extends BaseAction {\n    error: Error\n}\n\ninterface LoadAction extends BaseAction {\n    duration: number\n}\n\ntype Action = BaseAction | ErrorAction | LoadAction\n\nexport interface AudioPlayerState {\n    loading: boolean\n    playing: boolean\n    stopped: boolean\n    error: Error | null\n    duration: number\n    ready: boolean\n    ended: boolean\n}\n\nexport const initialState: AudioPlayerState = {\n    loading: true,\n    playing: false,\n    stopped: true,\n    ended: false,\n    error: null,\n    duration: 0,\n    ready: false\n}\n\nexport function reducer(state: AudioPlayerState, action: Action) {\n    switch (action.type) {\n        case Actions.START_LOAD:\n            return {\n                ...state,\n                loading: true,\n                stopped: true,\n                ready: false,\n                error: null,\n                duration: 0\n            }\n        case Actions.ON_LOAD:\n            return {\n                ...state,\n                loading: false,\n                duration: (action as LoadAction).duration,\n                ended: false,\n                ready: true\n            }\n        case Actions.ON_PLAY:\n            return {\n                ...state,\n                playing: true,\n                ended: false,\n                stopped: false\n            }\n        case Actions.ON_STOP:\n            return {\n                ...state,\n                stopped: true,\n                playing: false\n            }\n        case Actions.ON_END:\n            return {\n                ...state,\n                stopped: true,\n                playing: false,\n                ended: true\n            }\n        case Actions.ON_PAUSE:\n            return {\n                ...state,\n                playing: false\n            }\n        case Actions.ON_PLAY_ERROR:\n            return {\n                ...state,\n                playing: false,\n                stopped: true,\n                error: (action as ErrorAction).error\n            }\n        case Actions.ON_LOAD_ERROR:\n            return {\n                ...state,\n                playing: false,\n                stopped: true,\n                loading: false,\n                error: (action as ErrorAction).error\n            }\n        default:\n            return state\n    }\n}\n","import React from \"react\"\nimport { AudioPlayerContext, AudioPlayerPositionContext } from \"./types\"\n\nexport const playerContext = React.createContext<AudioPlayerContext | null>(\n    null\n)\n\nexport const positionContext = React.createContext<AudioPlayerPositionContext>({\n    position: 0,\n    setPosition: () => {}\n})\n","import { useCallback, useContext, useEffect } from \"react\"\nimport { Howl, HowlOptions } from \"howler\"\nimport { playerContext } from \"./context\"\nimport { AudioPlayerContext } from \"./types\"\n\nconst noop = () => {}\n\nexport type AudioPlayerControls = Omit<AudioPlayerContext, \"player\"> & {\n    play: Howl[\"play\"] | typeof noop\n    pause: Howl[\"pause\"] | typeof noop\n    stop: Howl[\"stop\"] | typeof noop\n    mute: Howl[\"mute\"] | typeof noop\n    volume: Howl[\"volume\"] | typeof noop\n    togglePlayPause: () => void\n    player: Howl | null\n}\n\nexport const useAudioPlayer = (options?: HowlOptions): AudioPlayerControls => {\n    const { player, load, ...rest } = useContext(playerContext)!\n\n    useEffect(() => {\n        const { src, ...restOptions } = options || {}\n        // if useAudioPlayer is called without arguments\n        // don't do anything: the user will have access\n        // to the current context\n        if (!src) return\n        load({ src, ...restOptions })\n    }, [options, load])\n\n    const togglePlayPause = useCallback(() => {\n        if (!player) return\n\n        if (player.playing()) {\n            player.pause()\n        } else {\n            player.play()\n        }\n    }, [player])\n\n    return {\n        ...rest,\n        player,\n        play: player ? player.play.bind(player) : noop,\n        pause: player ? player.pause.bind(player) : noop,\n        stop: player ? player.stop.bind(player) : noop,\n        mute: player ? player.mute.bind(player) : noop,\n        volume: player ? player.volume.bind(player) : noop,\n        load,\n        togglePlayPause\n    }\n}\n","import { useEffect, useLayoutEffect } from \"react\"\n\n/**\n * Abstraction for useLayoutEffect.\n *\n * It will use useLayoutEffect() on the client, but while rendering on the server it will use\n * useEffect() to avoid ssr servers warnings like \"useLayoutEffect does nothing on the server\".\n */\nconst useIsomorphicLayoutEffect =\n    typeof window !== \"undefined\" ? useLayoutEffect : useEffect\n\nexport default useIsomorphicLayoutEffect\n","import React, {\n    useState,\n    useCallback,\n    useEffect,\n    useRef,\n    useReducer,\n    useMemo\n} from \"react\"\nimport { Howl, HowlOptions } from \"howler\"\nimport { initialState, reducer, Actions } from \"./audioPlayerState\"\nimport { playerContext, positionContext } from \"./context\"\nimport { AudioPlayerContext } from \"./types\"\n\nexport interface AudioPlayerProviderProps {\n    children: React.ReactNode\n    value?: AudioPlayerContext\n}\n\nexport function AudioPlayerProvider({\n    children,\n    value\n}: AudioPlayerProviderProps) {\n    const [player, setPlayer] = useState<Howl | null>(null)\n    const [\n        { loading, error, playing, stopped, duration, ready, ended },\n        dispatch\n    ] = useReducer(reducer, initialState)\n\n    const playerRef = useRef<Howl>()\n    const prevPlayer = useRef<Howl>()\n\n    const [position, setPosition] = useState(0)\n    const positionContextValue = useMemo(\n        () => ({\n            position,\n            setPosition\n        }),\n        [position, setPosition]\n    )\n\n    const constructHowl = useCallback((audioProps: HowlOptions): Howl => {\n        return new Howl(audioProps)\n    }, [])\n\n    const load = useCallback(\n        ({ src, autoplay = false, html5 = false, ...rest }: HowlOptions) => {\n            let wasPlaying = false\n            if (playerRef.current) {\n                // don't do anything if we're asked to reload the same source\n                // @ts-ignore the _src argument actually exists\n                const { _src } = playerRef.current\n                // internal Howl _src property is sometimes an array and other times a single string\n                // still need to to do more research on why this is\n                const prevSrc = Array.isArray(_src) ? _src[0] : _src\n                if (prevSrc === src) return\n\n                // if the previous sound is still loading then destroy it as soon as it finishes\n                if (loading) {\n                    prevPlayer.current = playerRef.current\n                    prevPlayer.current.once(\"load\", () => {\n                        prevPlayer.current?.unload()\n                    })\n                }\n\n                wasPlaying = playerRef.current.playing()\n                if (wasPlaying) {\n                    playerRef.current.stop()\n                    // remove event handlers from player that is about to be replaced\n                    playerRef.current.off()\n                    playerRef.current = undefined\n                }\n            }\n\n            // signal that the loading process has begun\n            dispatch({ type: Actions.START_LOAD })\n\n            // create a new player\n            const howl = constructHowl({\n                src,\n                autoplay: wasPlaying || autoplay, // continues playing next song\n                html5,\n                ...rest\n            })\n\n            // if this howl has already been loaded (cached) then fire the load action\n            // @ts-ignore _state exists\n            if (howl._state === \"loaded\") {\n                dispatch({ type: Actions.ON_LOAD, duration: howl.duration() })\n            }\n\n            howl.on(\n                \"load\",\n                () =>\n                    void dispatch({\n                        type: Actions.ON_LOAD,\n                        duration: howl.duration()\n                    })\n            )\n            howl.on(\"play\", () => void dispatch({ type: Actions.ON_PLAY }))\n            howl.on(\"end\", () => void dispatch({ type: Actions.ON_END }))\n            howl.on(\"pause\", () => void dispatch({ type: Actions.ON_PAUSE }))\n            howl.on(\"stop\", () => void dispatch({ type: Actions.ON_STOP }))\n            howl.on(\"playerror\", (_id, error) => {\n                dispatch({\n                    type: Actions.ON_PLAY_ERROR,\n                    error: new Error(\"[Play error] \" + error)\n                })\n            })\n            howl.on(\"loaderror\", (_id, error) => {\n                dispatch({\n                    type: Actions.ON_LOAD_ERROR,\n                    error: new Error(\"[Load error] \" + error)\n                })\n            })\n\n            setPlayer(howl)\n            playerRef.current = howl\n        },\n        [constructHowl, loading]\n    )\n\n    useEffect(() => {\n        // unload the player on unmount\n        return () => {\n            if (playerRef.current) playerRef.current.unload()\n        }\n    }, [])\n\n    const contextValue: AudioPlayerContext = useMemo(() => {\n        return value\n            ? value\n            : {\n                  player,\n                  load,\n                  error,\n                  loading,\n                  playing,\n                  stopped,\n                  ready,\n                  duration,\n                  ended\n              }\n    }, [\n        loading,\n        error,\n        playing,\n        stopped,\n        load,\n        value,\n        player,\n        ready,\n        duration,\n        ended\n    ])\n\n    return (\n        <playerContext.Provider value={contextValue}>\n            <positionContext.Provider value={positionContextValue}>\n                {children}\n            </positionContext.Provider>\n        </playerContext.Provider>\n    )\n}\n","import { useCallback, useContext, useEffect, useMemo, useRef } from \"react\"\nimport { playerContext, positionContext } from \"./context\"\nimport { Howl } from \"howler\"\nimport useIsomorphicLayoutEffect from \"./useIsomorphicLayout\"\n\ninterface UseAudioPositionConfig {\n    highRefreshRate?: boolean\n}\n\ninterface AudioPosition {\n    position: number\n    duration: number\n    percentComplete: number\n    seek: (position: number) => number\n}\n\n// gives current audio position state - updates in an animation frame loop for animating audio visualizations\nexport const useAudioPosition = (\n    config: UseAudioPositionConfig = {}\n): AudioPosition => {\n    const { highRefreshRate = false } = config\n    const { player, playing, stopped, duration } = useContext(playerContext)!\n    const { position, setPosition } = useContext(positionContext)\n\n    const animationFrameRef = useRef<number>()\n\n    // sets position on player initialization and when the audio is stopped\n    useEffect(() => {\n        if (player) {\n            setPosition(player.seek() as number)\n        }\n    }, [player, setPosition, stopped])\n\n    // updates position on a one second loop for low refresh rate default setting\n    useEffect(() => {\n        let timeout: number\n        if (!highRefreshRate && player && playing)\n            timeout = window.setInterval(\n                () => setPosition(player.seek() as number),\n                1000\n            )\n        return () => clearTimeout(timeout)\n    }, [highRefreshRate, player, playing, setPosition])\n\n    // updates position on a 60fps loop for high refresh rate setting\n    useIsomorphicLayoutEffect(() => {\n        const animate = () => {\n            setPosition(player?.seek() as number)\n            animationFrameRef.current = requestAnimationFrame(animate)\n        }\n\n        // kick off a new animation cycle when the player is defined and starts playing\n        if (highRefreshRate && player && playing) {\n            animationFrameRef.current = requestAnimationFrame(animate)\n        }\n\n        return () => {\n            if (animationFrameRef.current) {\n                cancelAnimationFrame(animationFrameRef.current)\n            }\n        }\n    }, [highRefreshRate, player, playing, setPosition])\n\n    const seek = useCallback(\n        position => {\n            if (!player) return 0\n\n            // it appears that howler returns the Howl object when seek is given a position\n            // to get the latest potion you must call seek again with no parameters\n            const result = player.seek(position) as Howl\n            const updatedPos = result.seek() as number\n            setPosition(updatedPos)\n            return updatedPos\n        },\n        [player, setPosition]\n    )\n\n    const percentComplete = useMemo(() => {\n        return (position / duration) * 100 || 0\n    }, [duration, position])\n\n    return { position, duration, seek, percentComplete }\n}\n"],"names":["Actions","initialState","loading","playing","stopped","ended","error","duration","ready","reducer","state","action","type","START_LOAD","ON_LOAD","ON_PLAY","ON_STOP","ON_END","ON_PAUSE","ON_PLAY_ERROR","ON_LOAD_ERROR","playerContext","React","createContext","positionContext","position","setPosition","noop","useIsomorphicLayoutEffect","window","useLayoutEffect","useEffect","children","value","useState","player","setPlayer","useReducer","dispatch","playerRef","useRef","prevPlayer","positionContextValue","useMemo","constructHowl","useCallback","audioProps","Howl","load","src","autoplay","html5","rest","wasPlaying","current","_src","Array","isArray","once","unload","stop","off","undefined","howl","_state","on","_id","Error","contextValue","Provider","options","useContext","restOptions","togglePlayPause","pause","play","bind","mute","volume","config","highRefreshRate","animationFrameRef","seek","timeout","setInterval","clearTimeout","requestAnimationFrame","animate","cancelAnimationFrame","updatedPos","percentComplete"],"mappings":"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"}